// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: technician/technician.proto

package technician

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TechnicianService_CreateTechnician_FullMethodName = "/TechnicianService/CreateTechnician"
	TechnicianService_GetTechnician_FullMethodName    = "/TechnicianService/GetTechnician"
	TechnicianService_ListTechnicians_FullMethodName  = "/TechnicianService/ListTechnicians"
)

// TechnicianServiceClient is the client API for TechnicianService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TechnicianServiceClient interface {
	CreateTechnician(ctx context.Context, in *CreateTechnicianRequest, opts ...grpc.CallOption) (*CreateTechnicianResponse, error)
	GetTechnician(ctx context.Context, in *GetTechnicianRequest, opts ...grpc.CallOption) (*Technician, error)
	ListTechnicians(ctx context.Context, in *ListTechniciansRequest, opts ...grpc.CallOption) (*ListTechniciansResponse, error)
}

type technicianServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTechnicianServiceClient(cc grpc.ClientConnInterface) TechnicianServiceClient {
	return &technicianServiceClient{cc}
}

func (c *technicianServiceClient) CreateTechnician(ctx context.Context, in *CreateTechnicianRequest, opts ...grpc.CallOption) (*CreateTechnicianResponse, error) {
	out := new(CreateTechnicianResponse)
	err := c.cc.Invoke(ctx, TechnicianService_CreateTechnician_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *technicianServiceClient) GetTechnician(ctx context.Context, in *GetTechnicianRequest, opts ...grpc.CallOption) (*Technician, error) {
	out := new(Technician)
	err := c.cc.Invoke(ctx, TechnicianService_GetTechnician_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *technicianServiceClient) ListTechnicians(ctx context.Context, in *ListTechniciansRequest, opts ...grpc.CallOption) (*ListTechniciansResponse, error) {
	out := new(ListTechniciansResponse)
	err := c.cc.Invoke(ctx, TechnicianService_ListTechnicians_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TechnicianServiceServer is the server API for TechnicianService service.
// All implementations must embed UnimplementedTechnicianServiceServer
// for forward compatibility
type TechnicianServiceServer interface {
	CreateTechnician(context.Context, *CreateTechnicianRequest) (*CreateTechnicianResponse, error)
	GetTechnician(context.Context, *GetTechnicianRequest) (*Technician, error)
	ListTechnicians(context.Context, *ListTechniciansRequest) (*ListTechniciansResponse, error)
	mustEmbedUnimplementedTechnicianServiceServer()
}

// UnimplementedTechnicianServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTechnicianServiceServer struct {
}

func (UnimplementedTechnicianServiceServer) CreateTechnician(context.Context, *CreateTechnicianRequest) (*CreateTechnicianResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTechnician not implemented")
}
func (UnimplementedTechnicianServiceServer) GetTechnician(context.Context, *GetTechnicianRequest) (*Technician, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTechnician not implemented")
}
func (UnimplementedTechnicianServiceServer) ListTechnicians(context.Context, *ListTechniciansRequest) (*ListTechniciansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTechnicians not implemented")
}
func (UnimplementedTechnicianServiceServer) mustEmbedUnimplementedTechnicianServiceServer() {}

// UnsafeTechnicianServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TechnicianServiceServer will
// result in compilation errors.
type UnsafeTechnicianServiceServer interface {
	mustEmbedUnimplementedTechnicianServiceServer()
}

func RegisterTechnicianServiceServer(s grpc.ServiceRegistrar, srv TechnicianServiceServer) {
	s.RegisterService(&TechnicianService_ServiceDesc, srv)
}

func _TechnicianService_CreateTechnician_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTechnicianRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechnicianServiceServer).CreateTechnician(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TechnicianService_CreateTechnician_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechnicianServiceServer).CreateTechnician(ctx, req.(*CreateTechnicianRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TechnicianService_GetTechnician_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTechnicianRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechnicianServiceServer).GetTechnician(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TechnicianService_GetTechnician_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechnicianServiceServer).GetTechnician(ctx, req.(*GetTechnicianRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TechnicianService_ListTechnicians_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTechniciansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechnicianServiceServer).ListTechnicians(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TechnicianService_ListTechnicians_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechnicianServiceServer).ListTechnicians(ctx, req.(*ListTechniciansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TechnicianService_ServiceDesc is the grpc.ServiceDesc for TechnicianService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TechnicianService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TechnicianService",
	HandlerType: (*TechnicianServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTechnician",
			Handler:    _TechnicianService_CreateTechnician_Handler,
		},
		{
			MethodName: "GetTechnician",
			Handler:    _TechnicianService_GetTechnician_Handler,
		},
		{
			MethodName: "ListTechnicians",
			Handler:    _TechnicianService_ListTechnicians_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "technician/technician.proto",
}
