// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: repairorder/repairorder.proto

package repairorder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RepairOrderService_CreateRepairOrder_FullMethodName = "/RepairOrderService/CreateRepairOrder"
	RepairOrderService_GetRepairOrder_FullMethodName    = "/RepairOrderService/GetRepairOrder"
	RepairOrderService_ListRepairOrders_FullMethodName  = "/RepairOrderService/ListRepairOrders"
)

// RepairOrderServiceClient is the client API for RepairOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepairOrderServiceClient interface {
	CreateRepairOrder(ctx context.Context, in *CreateRepairOrderRequest, opts ...grpc.CallOption) (*CreateRepairOrderResponse, error)
	GetRepairOrder(ctx context.Context, in *GetRepairOrderRequest, opts ...grpc.CallOption) (*RepairOrder, error)
	ListRepairOrders(ctx context.Context, in *ListRepairOrdersRequest, opts ...grpc.CallOption) (*ListRepairOrdersResponse, error)
}

type repairOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepairOrderServiceClient(cc grpc.ClientConnInterface) RepairOrderServiceClient {
	return &repairOrderServiceClient{cc}
}

func (c *repairOrderServiceClient) CreateRepairOrder(ctx context.Context, in *CreateRepairOrderRequest, opts ...grpc.CallOption) (*CreateRepairOrderResponse, error) {
	out := new(CreateRepairOrderResponse)
	err := c.cc.Invoke(ctx, RepairOrderService_CreateRepairOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repairOrderServiceClient) GetRepairOrder(ctx context.Context, in *GetRepairOrderRequest, opts ...grpc.CallOption) (*RepairOrder, error) {
	out := new(RepairOrder)
	err := c.cc.Invoke(ctx, RepairOrderService_GetRepairOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repairOrderServiceClient) ListRepairOrders(ctx context.Context, in *ListRepairOrdersRequest, opts ...grpc.CallOption) (*ListRepairOrdersResponse, error) {
	out := new(ListRepairOrdersResponse)
	err := c.cc.Invoke(ctx, RepairOrderService_ListRepairOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepairOrderServiceServer is the server API for RepairOrderService service.
// All implementations must embed UnimplementedRepairOrderServiceServer
// for forward compatibility
type RepairOrderServiceServer interface {
	CreateRepairOrder(context.Context, *CreateRepairOrderRequest) (*CreateRepairOrderResponse, error)
	GetRepairOrder(context.Context, *GetRepairOrderRequest) (*RepairOrder, error)
	ListRepairOrders(context.Context, *ListRepairOrdersRequest) (*ListRepairOrdersResponse, error)
	mustEmbedUnimplementedRepairOrderServiceServer()
}

// UnimplementedRepairOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepairOrderServiceServer struct {
}

func (UnimplementedRepairOrderServiceServer) CreateRepairOrder(context.Context, *CreateRepairOrderRequest) (*CreateRepairOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepairOrder not implemented")
}
func (UnimplementedRepairOrderServiceServer) GetRepairOrder(context.Context, *GetRepairOrderRequest) (*RepairOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepairOrder not implemented")
}
func (UnimplementedRepairOrderServiceServer) ListRepairOrders(context.Context, *ListRepairOrdersRequest) (*ListRepairOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepairOrders not implemented")
}
func (UnimplementedRepairOrderServiceServer) mustEmbedUnimplementedRepairOrderServiceServer() {}

// UnsafeRepairOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepairOrderServiceServer will
// result in compilation errors.
type UnsafeRepairOrderServiceServer interface {
	mustEmbedUnimplementedRepairOrderServiceServer()
}

func RegisterRepairOrderServiceServer(s grpc.ServiceRegistrar, srv RepairOrderServiceServer) {
	s.RegisterService(&RepairOrderService_ServiceDesc, srv)
}

func _RepairOrderService_CreateRepairOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepairOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepairOrderServiceServer).CreateRepairOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepairOrderService_CreateRepairOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepairOrderServiceServer).CreateRepairOrder(ctx, req.(*CreateRepairOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepairOrderService_GetRepairOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepairOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepairOrderServiceServer).GetRepairOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepairOrderService_GetRepairOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepairOrderServiceServer).GetRepairOrder(ctx, req.(*GetRepairOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepairOrderService_ListRepairOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepairOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepairOrderServiceServer).ListRepairOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepairOrderService_ListRepairOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepairOrderServiceServer).ListRepairOrders(ctx, req.(*ListRepairOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepairOrderService_ServiceDesc is the grpc.ServiceDesc for RepairOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepairOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RepairOrderService",
	HandlerType: (*RepairOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepairOrder",
			Handler:    _RepairOrderService_CreateRepairOrder_Handler,
		},
		{
			MethodName: "GetRepairOrder",
			Handler:    _RepairOrderService_GetRepairOrder_Handler,
		},
		{
			MethodName: "ListRepairOrders",
			Handler:    _RepairOrderService_ListRepairOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repairorder/repairorder.proto",
}
